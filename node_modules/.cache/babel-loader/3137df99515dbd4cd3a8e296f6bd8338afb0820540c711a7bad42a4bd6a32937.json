{"ast":null,"code":"const [callStack, setCallStack] = useState([]);\nconst runCode = () => {\n  const logs = [];\n  const stack = [];\n\n  // Override console.log\n  const originalLog = console.log;\n  console.log = (...args) => {\n    logs.push(args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg)).join(\" \"));\n    originalLog(...args);\n  };\n  const instrumentedCode = `\n    const callStack = [];\n\n    function track(fn, name) {\n      return function (...args) {\n        callStack.push(name);\n        console.log(\">> Enter:\", name);\n        const result = fn.apply(this, args);\n        console.log(\"<< Exit:\", name);\n        callStack.pop();\n        return result;\n      };\n    }\n\n    ${code}\n  `;\n  try {\n    const fn = new Function(instrumentedCode);\n    fn();\n  } catch (err) {\n    logs.push(\"Error: \" + err.message);\n  }\n  console.log = originalLog;\n  setLogs(logs);\n  setCallStack([...stack]); // in real setup, extract from eval'd context\n};","map":{"version":3,"names":["callStack","setCallStack","useState","runCode","logs","stack","originalLog","console","log","args","push","map","arg","JSON","stringify","String","join","instrumentedCode","code","fn","Function","err","message","setLogs"],"sources":["/Users/sreedevir/Downloads/js-visualizer-starter/src/components/EditorPage.jsx"],"sourcesContent":["const [callStack, setCallStack] = useState([]);\n\nconst runCode = () => {\n  const logs = [];\n  const stack = [];\n\n  // Override console.log\n  const originalLog = console.log;\n  console.log = (...args) => {\n    logs.push(args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg)).join(\" \"));\n    originalLog(...args);\n  };\n\n  const instrumentedCode = `\n    const callStack = [];\n\n    function track(fn, name) {\n      return function (...args) {\n        callStack.push(name);\n        console.log(\">> Enter:\", name);\n        const result = fn.apply(this, args);\n        console.log(\"<< Exit:\", name);\n        callStack.pop();\n        return result;\n      };\n    }\n\n    ${code}\n  `;\n\n  try {\n    const fn = new Function(instrumentedCode);\n    fn();\n  } catch (err) {\n    logs.push(\"Error: \" + err.message);\n  }\n\n  console.log = originalLog;\n  setLogs(logs);\n  setCallStack([...stack]); // in real setup, extract from eval'd context\n};\n"],"mappings":"AAAA,MAAM,CAACA,SAAS,EAAEC,YAAY,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;AAE9C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACpB,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,KAAK,GAAG,EAAE;;EAEhB;EACA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG;EAC/BD,OAAO,CAACC,GAAG,GAAG,CAAC,GAAGC,IAAI,KAAK;IACzBL,IAAI,CAACM,IAAI,CAACD,IAAI,CAACE,GAAG,CAACC,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAACF,GAAG,CAAC,GAAGG,MAAM,CAACH,GAAG,CAAC,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC,CAAC;IACjGV,WAAW,CAAC,GAAGG,IAAI,CAAC;EACtB,CAAC;EAED,MAAMQ,gBAAgB,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI;AACV,GAAG;EAED,IAAI;IACF,MAAMC,EAAE,GAAG,IAAIC,QAAQ,CAACH,gBAAgB,CAAC;IACzCE,EAAE,CAAC,CAAC;EACN,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZjB,IAAI,CAACM,IAAI,CAAC,SAAS,GAAGW,GAAG,CAACC,OAAO,CAAC;EACpC;EAEAf,OAAO,CAACC,GAAG,GAAGF,WAAW;EACzBiB,OAAO,CAACnB,IAAI,CAAC;EACbH,YAAY,CAAC,CAAC,GAAGI,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}